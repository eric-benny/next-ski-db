// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  someField String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Manufacturer {
  id          String      @id @default(cuid())
  name        String      @unique
  skiFamilies SkiFamily[]
  Ski         Ski[]
}

model SkiFamily {
  id             String       @id @default(cuid())
  name           String       @unique
  manufacturerId String
  manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)
  Ski            Ski[]
}

model Comparison {
  id         String  @id @default(cuid())
  attribute  String
  quantifier Int
  skiCompId  String
  skiComp    SkiComp @relation(fields: [skiCompId], references: [id], onDelete: Cascade)
}

model SkiComp {
  id             String       @id @default(cuid())
  primarySkiId   String
  primarySki     Ski          @relation("PrimarySki", fields: [primarySkiId], references: [id], onDelete: Cascade)
  secondarySkiId String
  secondarySki   Ski          @relation("SecondarySki", fields: [secondarySkiId], references: [id], onDelete: Cascade)
  comps          Comparison[]

  @@unique([primarySkiId, secondarySkiId])
}

model SkiLength {
  id    String @id @default(cuid())
  skiId String
  ski   Ski    @relation(fields: [skiId], references: [id], onDelete: Cascade)
}

model Ski {
  id                String       @id @default(cuid())
  yearCurrent       Int
  yearReleased      Int
  retired           Boolean      @default(false)
  manufacturerId    String
  manufacturer      Manufacturer @relation(fields: [manufacturerId], references: [id], onDelete: SetNull)
  model             String
  predecessorId     String?      @unique
  predecessor       Ski?         @relation("SkiSuccession", fields: [predecessorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  successor         Ski?         @relation("SkiSuccession")
  familyId          String?
  family            SkiFamily?    @relation(fields: [familyId], references: [id], onDelete: SetNull)
  lengths           SkiLength[]
  specs             String
  guideInfo         String
  notes             String
  fullReview        String
  firstLook         String
  flashReview       String
  deepDive          String
  primarySkiComps   SkiComp[]    @relation("PrimarySki")
  secondarySkiComps SkiComp[]    @relation("SecondarySki")
}
