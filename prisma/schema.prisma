// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  someField String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  notes         Note[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Manufacturer {
  id          String      @id @default(cuid())
  name        String      @unique
  skiFamilies SkiFamily[]
  skis        Ski[]
}

model SkiFamily {
  id             String       @id @default(cuid())
  name           String       @unique
  manufacturerId String
  manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)
  skis           Ski[]
}

model Comparison {
  id         String  @id @default(cuid())
  attribute  String
  quantifier Int
  skiCompId  String
  skiComp    SkiComp @relation(fields: [skiCompId], references: [id], onDelete: Cascade)

  @@unique([attribute, skiCompId])
}

model SkiComp {
  id             String       @id @default(cuid())
  primarySkiId   String
  primarySki     Ski          @relation("PrimarySki", fields: [primarySkiId], references: [id], onDelete: Cascade)
  secondarySkiId String
  secondarySki   Ski          @relation("SecondarySki", fields: [secondarySkiId], references: [id], onDelete: Cascade)
  comps          Comparison[]

  @@unique([primarySkiId, secondarySkiId])
}

model SkiLength {
  id     String @id @default(cuid())
  length Float
  skiId  String
  ski    Ski    @relation(fields: [skiId], references: [id], onDelete: Cascade)
}

model Note {
  id          String   @id @default(cuid())
  note        String
  lastUpdated DateTime
  skiDays     Int
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: SetNull)
  skiId       String
  ski         Ski      @relation(fields: [skiId], references: [id], onDelete: Cascade)

  @@unique([userId, skiId])
}

model GuideSki {
  id         String @id @default(cuid())
  year       Int
  category   String
  specLength Float
  summary    String
  skiId      String
  ski        Ski    @relation(fields: [skiId], references: [id], onDelete: Cascade)

  @@unique([skiId, year, category, specLength])
}

model MountPointFac {
  id     String  @id @default(cuid())
  desc   String
  specId String
  spec   SkiSpec @relation(fields: [specId], references: [id], onDelete: Cascade)
}

model MountPointBlist {
  id     String  @id @default(cuid())
  desc   String
  specId String
  spec   SkiSpec @relation(fields: [specId], references: [id], onDelete: Cascade)
}

model SkiSpec {
  id              String            @id @default(cuid())
  length          Float
  measuredLength  Float
  weightStated    Float
  weightMeas1     Int
  weightMeas2     Int
  dimTip          Float
  dimWaist        Float
  dimTail         Float
  dimTipMeas      Float
  dimWaistMeas    Float
  dimTailMeas     Float
  sidcutStated    Float
  splayTip        Int
  splayTail       Int
  camberStated    String
  camberMeas      String
  core            String
  mountPointFac   MountPointFac[]
  mountPointBlist MountPointBlist[]
  flexTip         String
  flexShovel      String
  flexFront       String
  flexFoot        String
  flexBack        String
  flexTail        String
  skiId           String
  ski             Ski               @relation(fields: [skiId], references: [id], onDelete: Cascade)
}

model Ski {
  id                String       @id @default(cuid())
  yearCurrent       Int
  yearReleased      Int
  retired           Boolean      @default(false)
  manufacturerId    String
  manufacturer      Manufacturer @relation(fields: [manufacturerId], references: [id], onDelete: SetNull)
  model             String
  predecessorId     String?      @unique
  predecessor       Ski?         @relation("SkiSuccession", fields: [predecessorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  successor         Ski?         @relation("SkiSuccession")
  familyId          String?
  family            SkiFamily?   @relation(fields: [familyId], references: [id], onDelete: SetNull)
  lengths           SkiLength[]
  specs             SkiSpec[]
  guideInfo         GuideSki[]
  notes             Note[]
  fullReview        String
  firstLook         String
  flashReview       String
  deepDive          String
  primarySkiComps   SkiComp[]    @relation("PrimarySki")
  secondarySkiComps SkiComp[]    @relation("SecondarySki")

  @@unique([model, manufacturerId, yearReleased], name: "unique_ski")
}
