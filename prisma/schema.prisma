// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  someField String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// // Necessary for Next auth
// model Account {
//   id                String  @id @default(cuid())
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? @db.Text
//   access_token      String? @db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.Text
//   session_state     String?
//   user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
//   @@index([userId])
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@index([userId])
// }

enum Role {
  USER
  ADMIN
}

// model User {
//   id            String        @id @default(cuid())
//   name          String?
//   email         String?       @unique
//   emailVerified DateTime?
//   image         String?
//   role          Role          @default(USER)
//   accounts      Account[]
//   sessions      Session[]
//   notes         Note[]
//   favorites     SkiFavorite[]
// }

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }

model SkiFavorite {
  id     String @id @default(cuid())
  userId String
  skiId  String
  ski    Ski    @relation(fields: [skiId], references: [id], onDelete: NoAction)

  @@unique([userId, skiId])
  @@index([skiId])
}

model Manufacturer {
  id          String      @id @default(cuid())
  name        String      @unique
  skiFamilies SkiFamily[]
  skis        Ski[]
}

model SkiFamily {
  id             String       @id @default(cuid())
  name           String       @unique
  manufacturerId String
  manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)
  skis           Ski[]

  @@index([manufacturerId])
}

model Comparison {
  id         String  @id @default(cuid())
  attribute  String
  quantifier Int
  skiCompId  String
  skiComp    SkiComp @relation(fields: [skiCompId], references: [id], onDelete: Cascade)

  @@unique([attribute, skiCompId])
  @@index([skiCompId])
}

model SkiComp {
  id             String       @id @default(cuid())
  primarySkiId   String
  primarySki     Ski          @relation("PrimarySki", fields: [primarySkiId], references: [id], onDelete: Cascade)
  secondarySkiId String
  secondarySki   Ski          @relation("SecondarySki", fields: [secondarySkiId], references: [id], onDelete: Cascade)
  comps          Comparison[]

  @@unique([primarySkiId, secondarySkiId])
  @@index([secondarySkiId])
}

model SkiLength {
  id     String @id @default(cuid())
  length Float
  skiId  String
  ski    Ski    @relation(fields: [skiId], references: [id], onDelete: Cascade)

  @@index([skiId])
}

model Note {
  id          String   @id @default(cuid())
  note        String?  @db.Text
  lastUpdated DateTime
  skiDays     Int      @default(0)
  userId      String
  skiId       String
  ski         Ski      @relation(fields: [skiId], references: [id], onDelete: Cascade)

  @@unique([userId, skiId])
  @@index([skiId])
}

model GuideSki {
  id         String  @id @default(cuid())
  year       Int
  category   String
  specLength Float
  summary    String? @db.Text
  skiId      String
  ski        Ski     @relation(fields: [skiId], references: [id], onDelete: Cascade)

  @@unique([skiId, year, category, specLength])
}

model MountPointFac {
  id          String  @id @default(cuid())
  description String
  specId      String
  spec        SkiSpec @relation(fields: [specId], references: [id], onDelete: Cascade)

  @@index([specId])
}

model MountPointBlist {
  id          String  @id @default(cuid())
  description String
  specId      String
  spec        SkiSpec @relation(fields: [specId], references: [id], onDelete: Cascade)

  @@index([specId])
}

model SkiSpec {
  id              String            @id @default(cuid())
  length          Float
  measuredLength  Float?
  weightStated    Float?
  weightMeas1     Int?
  weightMeas2     Int?
  dimTip          Float?
  dimWaist        Float?
  dimTail         Float?
  dimTipMeas      Float?
  dimWaistMeas    Float?
  dimTailMeas     Float?
  sidcutStated    Float?
  splayTip        Int?
  splayTail       Int?
  camberStated    String?
  camberMeas      String?
  core            String?
  base            String?
  mountPointFac   MountPointFac[]
  mountPointBlist MountPointBlist[]
  flexTip         String?
  flexShovel      String?
  flexFront       String?
  flexFoot        String?
  flexBack        String?
  flexTail        String?
  skiId           String
  ski             Ski               @relation(fields: [skiId], references: [id], onDelete: Cascade)

  @@unique([skiId, length], name: "unique_spec")
  @@index([skiId])
}

model Ski {
  id                String        @id @default(cuid())
  yearCurrent       Int
  yearReleased      Int
  retired           Boolean       @default(false)
  manufacturerId    String
  manufacturer      Manufacturer  @relation(fields: [manufacturerId], references: [id], onDelete: NoAction)
  model             String
  predecessorId     String?       @unique
  predecessor       Ski?          @relation("SkiSuccession", fields: [predecessorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  successor         Ski?          @relation("SkiSuccession")
  familyId          String?
  family            SkiFamily?    @relation(fields: [familyId], references: [id], onDelete: SetNull)
  lengths           SkiLength[]
  specs             SkiSpec[]
  guideInfo         GuideSki[]
  notes             Note[]
  favorites         SkiFavorite[]
  fullReview        String?
  firstLook         String?
  flashReview       String?
  deepDive          String?
  primarySkiComps   SkiComp[]     @relation("PrimarySki")
  secondarySkiComps SkiComp[]     @relation("SecondarySki")

  @@unique([model, manufacturerId, yearReleased], name: "unique_ski")
  @@index([manufacturerId])
  @@index([familyId])
}
